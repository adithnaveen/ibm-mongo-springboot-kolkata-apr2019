	
-- gives cursor
var itr=db.emps.find(); 

while(itr.hasNext()){
	// print(tojson(itr.next())); 
	printjson(itr.next()); 
	}

	
mongoimport --host localhost --port 27017 --db ibmdb --collection emps --file .\emps.json 

if the data is in json Array 
	
mongoimport --host localhost --port 27017 --db ibmdb --collection emps --file .\emps.json  --jsonArray 

1. export to json 

mongoexport --out empsout.json --db ibmdb --collection emps --host localhost 


2. export to json needed only empid and name 

mongoexport --out empsout1.json --db ibmdb --collection emps --host localhost  --fields "empname,empid"

3. to export in the sorted order 
mongoexport --out empsout3.json --db ibmdb --collection emps --host localhost  --fields "empname,empid" --sort {empid:-1}



--profiling (running more than 3 ms) 
-- indexes 


db.emps.createIndex({empname:1});

-- to show all indexed of the collection 
db.emps.getIndexes(); 

db.emps.createIndex({empname:1, empsal:1});

db.emps.createIndex({empname:-1, empsal:1});

db.emps.createIndex({empname:-1, empsal:-1});

db.emps.createIndex({empname:1, empsal:-1});

db.emps.createIndex({empid:1}, {sparse:true})

db.emps.find({$or:[{empname:"Ashutosh"},{empsal:{$gt:4000}}]}).explain("executionStats"); 


db.emps.find({$or:[{empname:"Ashutosh"},{empsal:{$gt:4000}}]}).hint({empname:1, empsal:1}).explain("executionStats");


db.emps.find({$or:[{empname:"Ashutosh"},{empsal:{$gt:4000}}]}).hint({empname:1, empsal:-1}).explain("executionStats");



select empname, empsal ... from emp where empsal > 3333; 

select empname, empsal ... from emp where pincode > 3333; 





empid, empname, empsal 




db.food.createIndex({name:1}, {unique:true});


db.food.insert({name:'Pizza'});
db.food.insert({name:null});




db.scores.insert({name:"newbie"}); 
db.scores.insert({name:"harry", marks:66}); 
db.scores.insert({name:"peter", marks: 88}); 

db.scores.find( { score: { $lt: 80 } } );


db.scores.find().sort( { marks: -1 } )



db.scores.createIndex({marks:1}, {sparse:true}); 




db.population.createIndex({loc:'2d', city:1});


db.population.find().limit(20).skip(10); 


db.population.find({loc:{$near:[72,40]}}).limit(20);


db.sentence.insert({"words":"dog"});
db.sentence.insert({"words":"cat are cats " }); 
db.sentence.insert({"words":"dog is fun to have "});
db.sentence.insert({"words":"dog running"}); db.sentence.insert({"words":"its a dog"});
db.sentence.insert({"words":"its a good dog"});
db.sentence.insert({"words":"its a bad dog"});
db.sentence.insert({"words":"its a naughty dog"});
db.sentence.insert({"words":"dogs and cats play "});



db.sentence.createIndex({'words':'text'});




db.sentence.find({$text:{$search:'snouser.'}});




hello how are you today 

'%who are %'


db.sentence.find({ $text:{
		$search:'hello cat & dog'
	}},
		{score:{ $meta:'textScore' }
}).sort({score:{$meta:'textScore'}});





db.getCollectionNames().forEach(function(collection) {
indexes = db[collection].getIndexes();
print("Indexes for " + collection + ":");
printjson(indexes);
});

db.population.aggregate( [
{ $group: { _id: "$state", totalPop: { $sum: "$pop" } } },
{ $match: { totalPop: { $gte: 10*1000*1000 } } }
]); 





function Emp(empid, empname){
	this.empid = empid; 
	this.empname = empname; 
	
}


Emp.prototype.display = function(){
	// will print emp data 
	100 variables in heap 
}


e = new Emp(101, "Harry"); 
e.display(); 





db.population.aggregate( [
{ $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },
{ $group: { _id: "$_id.state", avgCityPop: { $avg: "$pop" } } }
] )



db.population.aggregate( [
{ $group:
{
_id: { state: "$state", city: "$city" },
pop: { $sum: "$pop" }
}
},
{ $sort: { pop: 1 } },
{ $group:
{
_id : "$_id.state",
biggestCity: { $last: "$_id.city" },
biggestPop: { $last: "$pop" },
smallestCity: { $first: "$_id.city" },
smallestPop: { $first: "$pop" }
}
}]);



db.colors.insert({ "color" : "Green", "value" : 4 });
db.colors.insert({ "color" : "Green", "value" : 1 });
db.colors.insert({ "color" : "Green", "value" : 4 });
db.colors.insert({ "color" : "Blue", "value" : 4 });
db.colors.insert({ "color" : "Yellow", "value" : 39 });
db.colors.insert({ "color" : "Blue", "value" : 3 });





var map=function(){
	emit(this.color, this.value)
}


var reduce=function(key, values){
	var sum = 0; 
	for(i=0; i<values.length; i++){
		sum=sum+values[i]; 
	}
	
	return sum; 
}


var res=db.colors.mapReduce(map, reduce, {out:"My Test"}); 

db[res.result].find();



-- replication with MongoDB 

// create folder rs1, rs2, rs3 

we have to start the each server and get them into same 
eco system 

> mongod --replSet ibmrs --dbpath .\rs1 --port 27017 --oplogSize 64 --smallfiles 


> mongod --replSet ibmrs --dbpath .\rs2 --port 27018 --oplogSize 64 --smallfiles 

> mongod --replSet ibmrs --dbpath .\rs3 --port 27019 --oplogSize 64 --smallfiles --logpath .\rs1log.log



config={
	_id:"ibmrs", 
	members:[
		{_id:0, host:"localhost:27017"},
		{_id:1, host:"localhost:27018"},
		{_id:2, host:"localhost:27019"}
	]
}











27018 - primary 
27017 - secondary 
27019 - secondary 




for(var i=0; i<100000000; i++){
	db.mynums.insert({val: i}); 
}














